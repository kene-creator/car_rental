generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  email     String     @unique
  hash      String
  firstName String?
  lastName  String?
  Bookmarks Bookmark[]
  cars      UserCar[]

  @@map("users")
}

model Bookmark {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  link        String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  @@map("bookmarks")
}

model Car {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  thumbnailSrc   String?
  name           String
  gearType       String
  gasTank        String
  passenger      String
  dailyPrice     String
  monthlyPrice   String
  discountPrice  String?
  vehicle        String
  borrowedByUser UserCar[]

  @@map("cars")
}

model PopularCar {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  thumbnailSrc  String?
  name          String
  gearType      String
  gasTank       String
  passenger     String
  dailyPrice    String
  monthlyPrice  String
  discountPrice String?
  vehicle       String

  @@map("popular_cars")
}

model UserCar {
  id     Int  @id @default(autoincrement())
  userId Int
  carId  Int
  car    Car  @relation(fields: [carId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@map("user_cars")
}

model Paystack_Payment_References {
 id              String   @id @default(cuid())
  authorizationUrl String
  accessCode       String
  reference        String

  @@map("paystack_payment_references")
}
